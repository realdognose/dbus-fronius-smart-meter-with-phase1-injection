[DEFAULT]
AccessType=OnPremise
SignOfLifeLog=1

[ONPREMISE]
#Inverter hosting access to the smartmeter
Host=10.10.20.40

#FroniusID of the Smartmeter
MeterID=0

#VRM-ID of the injected meter
CreatedMeterID=123

#Update inverval ms
intervalMs=900

#Victron Service, which AC-Value should be used for the faked L1
#type dbus-spy in ssh to get a list of services and find the correct device. 
#value used is /Ac/Out/L1/P and /Ac/ActiveIn/L1/P
L1ServiceName=com.victronenergy.vebus.ttyS4 

#SolarOverheadShare
#When the System produces solar overhead, the fronius battery would usually charge first. 
#Here you can specify which part of energy (0 to 1) that is feed into the fronius battery
#should rather be used to reduce ESS load or even charge, if greater than the load. 
#Set this to 1, if you want the ESS Battery to charge with priority. 
#Set anything between 0 and 1 for a respective distribution.
#Set this to 0, if you don't wan't the L1 value to show faked Feed-In, because you are using charging
#Schedules or external control of the GridSetPoint.
SolarOverheadShare=1

#Here You can Limit the amount (Watts) of the faked "FeedIn" used to control ESS-Charging behaviour. 
#It doesn't make sence to fake more feed-in than the ESS could consume. (but doesn't hurt either)
SolarOverheadLimit=600

#ServiceName, where the battery load should be taken from, use dbus-spy again. 
#If you don't have the battery load of a fronius hybrid available, see my other script at 
#https://github.com/realdognose/dbus-fronius-hybrid-battery-visualisation
#if you use SolarOverheadShare=0, this value doesn't matter.
#Value used is /Dc/0/Power
BatteryServiceName=com.victronenergy.battery.http_45 

#LogLevel. 
#Use INFO for Output every now and then, DEBUG for Output every cycle. 
#WARNING: Keep the service running in DEBUG for a long time will spam the log file. 
#Options: TRACE, DEBUG, INFO, WARNING, ERROR
LogLevel=INFO

#DbusQueryCycleStart
#The script uses values of other Dbus Service, which may not yet be initialized when this service starts. 
#With this variable 0..255 you can configure how many cycles the script should wait, before it attempts
#to resolve values from dbus. Multiplied with the confiogured intervalMs you'll get the wait time in Milliseconds.
#Tests on my cerboGX show that about 25 seconds are most the time required until all services have settled.
DbusQueryCycleStart=30